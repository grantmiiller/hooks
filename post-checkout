#!/usr/bin/env python3

# This hook adds the switched to branch to a file for you to reference later
# Makes it easier to remember what you were up to when switching between a lot of brances

import sys, os, re, subprocess

MAX_NUM_OF_BRANCHES = 7
is_branch_checkout = sys.argv[3]
home_path = os.environ.get('HOME')
reminder_path = home_path + '/.git_reminder'

# Taken from http://stackoverflow.com/a/600612/119527
def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if type(exc) == FileExistsError and os.path.isdir(path):
            pass
        else: raise

def safe_open_w(path):
    ''' Open "path" for writing, creating any parent directories as needed.
    '''
    mkdir_p(os.path.dirname(path))
    return open(path, 'w')


if not reminder_path:
    print ("=========OOPS==========")
    print ("Please set %s" % env_name)
    sys.exit(0)

if is_branch_checkout == "0":
    print ("post-checkout: This is a file checkout. Nothing to do.")
    sys.exit(0)


githead = open('.git/HEAD', 'r').read()
if 'refs/heads/' in githead:
    branch_name = githead.split('refs/heads/')[1].strip('\n')
else:
    # we are doing a rebase or something, so do nothing
    sys.exit(0)

if branch_name in ['master', 'develop']:
    print ("post-checkout: Not tracking master or develop")
    sys.exit(0)

p = subprocess.Popen(['basename', os.getcwd()], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output, err = p.communicate()
if err:
    print ("=========OOPS==========")
    print ("Uh oh. Error: %s" % err)
    sys.exit(1)

filename = re.sub('\W+', '', output.decode('utf-8'))
fullpath = reminder_path + '/grf-' + filename

if os.path.isfile(fullpath):
    lines = [line.rstrip('\n') for line in open(fullpath)]
    if branch_name in lines:
        i = lines.index(branch_name)
        lines.pop(i)
else:
    lines = []

lines.insert(0, branch_name)
if len(lines) > MAX_NUM_OF_BRANCHES :
    lines = lines[0:MAX_NUM_OF_BRANCHES]

with safe_open_w(fullpath) as f:
    for item in lines:
        f.write("%s\n" % item)

    f.close()
